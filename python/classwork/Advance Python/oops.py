# -*- coding: utf-8 -*-
"""OOPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QfKRCe1svEbkH2uOgeiO7gEcoqcH_TBV

OOPS PYTHON

**ENCAPSULATION**
"""

class Car:
    def __init__(self, brand, model, year):
        # self.__brand = brand  # Encapsulate with double underscore #private attribute
        self.__brand = brand
        self.model = model
        self.year = year

    def get_brand(self):
        return self.__brand

    def accelerate(self):
        print(f"The {self.model} is accelerating!")


my_car = Car("Tesla", "Model S", 2023)


print(my_car.model)

print(my_car.get_brand())

"""**POLYMORPHISM**"""

class Animal :
    def make_sound(self):
        print("Generic animal sound")

class Dog(Animal):
    def make_sound(self):
        print("Woof!")


class Cat(Animal):
    def make_sound(self):
        print("Meow!")


def speak(animal):
    animal.make_sound()


dog = Dog()
cat = Cat()

speak(dog)
speak(cat)

"""SINGLE LEVEL INHERITANCE - one base class/ one dervied class"""

# Base class
class Animal:
    def speak(self):
        print("Animal speaks")

# Derived class
class Dog(Animal):
    def bark(self):
        print("Dog barks")

# Create an instance of Dog
dog = Dog()
dog.speak()  # Inherited method #output - animal speaks
dog.bark()   # Method of Dog class

"""multi level inheritance"""

# Base class 1
class Father:
    def skills(self):
        print("Father's skills")

# Base class 2
class Mother:
    def skills(self):
        print("Mother's skills")

# Derived class
class Child(Father, Mother): #multiple level inheritance going on here!
    def skills(self):
        super().skills()  # Calls the first class in the MRO (Method Resolution Order)
        print("Child's skills")

# Create an instance of Child
child = Child()
father = Father()
child.skills()  # This will call Child's skills method

""" Hierarichail"""

# Base class
class Animal:
    def speak(self):
        print("Animal speaks")

# Derived class 1
class Dog(Animal):
    def bark(self):
        print("Dog barks")

# Derived class 2
class Cat(Animal):
    def meow(self):
        print("Cat meows")

# Create instances of Dog and Cat
dog = Dog()
cat = Cat()

dog.speak()  # Inherited method calls
dog.bark()   # Method of Dog class

cat.speak()  # Inherited method
cat.meow()   # Method of Cat class

# Base class #self - use to acessing the instances variables and methods
class Animal:
    def speak(self):
        print("Animal speaks")

# Derived class
class Dog(Animal):
    def bark(self):
        print("Dog barks")

# Further derived class
class Puppy(Dog):
    def cry(self):
        print("Puppy cries")


# Create an instance of Puppy
puppy = Puppy()

puppy.speak()  # Inherited from Animal
puppy.bark()   # Inherited from Dog
puppy.cry()    # Method of Puppy class

"""METHOD OVERRIDING"""

class Animal :
  def make_sound (self) :
    return "generic"

class Dog(Animal):
  def make_sound(self):
    return "woof"

class Cat(Animal):
  def make_sound (self):
    return "meow"

# ques - do all the print statement will get printed in output ?

# make instance+call instance

dog=Dog()
cat=Cat()

print(dog.make_sound())

"""Hybrid Inheritance = combination multiple inheritance + multi-level inheritance

"""

# Base class / name - attribute
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"{self.name} makes a sound")

# Single inheritance
class Dog(Animal):
    def speak(self):
        print(f"{self.name} says Woof!")

# Multilevel inheritance
class Puppy(Dog):
    def speak(self):
        print(f"{self.name} says Yip!")

# Another base class
class Bird:
    def __init__(self, name):
        self.name = name

    def fly(self):
        print(f"{self.name} can fly")

# Multiple inheritance
#FLYING DOG - BASE CLASS OR PARENT = INHERITED FROM DOG AND BIRD
class FlyingDog(Dog, Bird):
    def __init__(self, name):
        Dog.__init__(self, name)
        Bird.__init__(self, name)

    def speak(self):
        Dog.speak(self)
        Bird.fly(self)

# Hybrid inheritance
class FlyingPuppy(Puppy, Bird):
    def __init__(self, name):
        Puppy.__init__(self, name)
        Bird.__init__(self, name)

    def speak(self):
        Puppy.speak(self)
        Bird.fly(self)

# Create instances
dog = Dog("Buddy")
puppy = Puppy("Fluffy")
flying_dog = FlyingDog("Sky")
flying_puppy = FlyingPuppy("Wings")

# Test the methods
dog.speak()             # Output: Buddy says Woof!
puppy.speak()           # Output: Fluffy says Yip!
flying_dog.speak()      # Output: Sky says Woof! \n Sky can fly
flying_puppy.speak()